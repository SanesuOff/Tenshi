const { SlashCommandBuilder, EmbedBuilder } = require("discord.js");
const User = require("../../models/User");
const Guild = require("../../models/Guild");

module.exports = {
  data: new SlashCommandBuilder()
    .setName("daily")
    .setDescription("R√©cup√®re votre r√©compense quotidienne"),

  async execute(interaction) {
    try {
      // R√©cup√©ration des param√®tres du serveur
      const guildData = await Guild.findOne({ guildId: interaction.guild.id });
      if (!guildData || !guildData.economy.enabled) {
        return await interaction.reply({
          content: "‚ùå Le syst√®me d'√©conomie n'est pas activ√© sur ce serveur.",
          ephemeral: true,
        });
      }

      // R√©cup√©ration des donn√©es utilisateur
      let userData = await User.findOne({
        userId: interaction.user.id,
        guildId: interaction.guild.id,
      });

      if (!userData) {
        userData = new User({
          userId: interaction.user.id,
          guildId: interaction.guild.id,
          username: interaction.user.username,
          economy: {
            balance: guildData.economy.startBalance,
            bank: 0,
          },
        });
      }

      // V√©rification du cooldown (24 heures)
      const now = Date.now();
      const lastDaily = userData.economy.lastDaily || 0;
      const timeDiff = now - lastDaily;
      const dayInMs = 24 * 60 * 60 * 1000;

      if (timeDiff < dayInMs) {
        const remainingTime = dayInMs - timeDiff;
        const hours = Math.floor(remainingTime / (60 * 60 * 1000));
        const minutes = Math.floor(
          (remainingTime % (60 * 60 * 1000)) / (60 * 1000)
        );

        const embed = new EmbedBuilder()
          .setColor(0xff6b6b)
          .setTitle("‚è∞ R√©compense Quotidienne")
          .setDescription(
            `Vous avez d√©j√† r√©cup√©r√© votre r√©compense quotidienne !`
          )
          .addFields({
            name: "‚è≥ Temps restant",
            value: `${hours}h ${minutes}m`,
            inline: true,
          })
          .setFooter({ text: "Tenshi Bot - √âconomie" })
          .setTimestamp();

        return await interaction.reply({ embeds: [embed] });
      }

      // Calcul de la r√©compense (100-500)
      const reward = Math.floor(Math.random() * 401) + 100;
      userData.economy.balance += reward;
      userData.economy.lastDaily = now;
      await userData.save();

      const embed = new EmbedBuilder()
        .setColor(0x57f287)
        .setTitle("üí∞ R√©compense Quotidienne")
        .setDescription(
          `F√©licitations ${interaction.user}! Vous avez re√ßu votre r√©compense quotidienne !`
        )
        .addFields(
          {
            name: "üíé R√©compense",
            value: `${guildData.economy.currency} ${reward.toLocaleString()}`,
            inline: true,
          },
          {
            name: "üíµ Nouveau solde",
            value: `${
              guildData.economy.currency
            } ${userData.economy.balance.toLocaleString()}`,
            inline: true,
          }
        )
        .setFooter({ text: "Tenshi Bot - √âconomie" })
        .setTimestamp();

      await interaction.reply({ embeds: [embed] });
    } catch (error) {
      console.error(
        "‚ùå Erreur lors de la r√©cup√©ration de la r√©compense quotidienne:",
        error
      );
      await interaction.reply({
        content:
          "‚ùå Une erreur s'est produite lors de la r√©cup√©ration de la r√©compense.",
        ephemeral: true,
      });
    }
  },
};
